#!/bin/bash
# Authors: James McDougall [Github JamesMcDougallJr], Scott Sakai
# The goal of this script is to start a jupyter notebook on comet by using the Reverse Proxy service.
# This makes a secure connection between the user's local machine and the RP server.

start_dir=""
runtime="00:30:00"
project=""
partition=""
batch_script=""

# Entry point for starting a notebook. Handles slurm processes and retrives url from slurm output
function start_notebook () {
    # get the Reverse proxy API_TOKEN
    api_token_response=$(curl -s https://manage.comet-user-content.sdsc.edu/getlink.cgi)
    api_token=${api_token_response#*"Your token is "} #strip the token out of response
    api_token=$(echo "$api_token" | tr '\n' ' ') # removes the newline char
    api_token=$(echo "$api_token" | xargs) # remove extra spaces before or after

    if [[ $api_token_response == Oops!* ]]
    then
        echo $api_token_response
        exit 1
    fi
        
    mkdir -p ~/.jupyter_secure
    chmod 777 ~/.jupyter_secure
    tmpfile=`mktemp -d -p ~/.jupyter_secure` || exit 1

    # Make a random ssl token
    jupyter_token=$(openssl rand -hex 16)

    # Create the temp config file
    touch "${tmpfile}/config.py"
    echo "c.NotebookApp.token = '$jupyter_token'" | cat >> "${tmpfile}/config.py"

    if [ "$start_dir" = "" ]; then
        echo "c.NotebookApp.notebook_dir = '/home/$USER/'" | cat >> "${tmpfile}/config.py"
    else
        echo "c.NotebookApp.notebook_dir = '$start_dir'" | cat >> "${tmpfile}/config.py"
    fi
    echo "c.NotebookApp.allow_origin = '*'" | cat >> "${tmpfile}/config.py"
    echo "c.NotebookApp.allow_remote_access = True" | cat >> "${tmpfile}/config.py"

    # Give the user the start of their url
    export jupyter_url="https://$api_token.comet-user-content.sdsc.edu?token=$jupyter_token"
    echo Your notebook is here:
    echo -e "\t$jupyter_url"

    # start the batch script with the api token and the starting directory
    # Argument 1 is the RP api token
    # Argument 2 is the tmpfile path

    if [ "$partition" = "" ]; then
        echo "Using default partition: compute"
        partition="compute"
    fi

    if [ "$runtime" = "" ]; then
        echo "No time allotment given. Default is 30 mins" 
    fi

    if [ "$batch_script" = "" ]; then
        echo "No batch script specified. Using ./batch/batch_notebook.sh"
        batch_script="batch/batch_notebook.sh"
    fi

    if [ "$project" = "" ]; then
        echo "Using default project"
        echo "Batch Script: $batch_script"
        sbatch -t $runtime -p $partition $batch_script $api_token $tmpfile
    else
        sbatch -t $runtime -A $project -p $partition $batch_script $api_token $tmpfile
    fi
}

# Arg 1 is the time to parse
# any other args are invalid and will be ignored
parse_time() {
    IFS=':' read -ra TIME <<< "$1"
    IFS=' '
    if [ ${#TIME[*]} -ne 3 ]
    then
        if [ ${#TIME[*]} = 1 ]
        then
            if [ ${TIME[0]} -ge 60 ]
            then
                # then divide it up into hours, minutes, etc
                hrs=$(( ${TIME[0]}/60 ))
                min=$(( ${TIME[0]}%60 ))
                hrsiz=${#hrs}
                minsiz=${#min}
                if [ $hrsiz -lt 2 ]; then
                    hrs="0$hrs"
                fi
                if [ $minsiz -lt 2 ]; then
                    min="0$min"
                fi
                echo "$hrs:$min:00"
                return 0
            elif [ ${TIME} -le 0 ]
            then
                echo "Error: Negative Time Invalid"
                exit 1
            else
                echo "00:${TIME[0]}:00"
                return 0
            fi
        else
            echo "Error: Invalid time format"
            exit 1
        fi
    else
        echo $1
        return 1
    fi
}

usage() { 
    echo "Usage: $0 [-d <string>] [-A <string>] [time]" 1>&2; 
    echo Default Dir: ~
    echo Default project is your sbatch default project
    echo Default Time is 30 mins
}

OPTIND=1
while getopts "h?:d:A:p:b:" opt; do
    case "$opt" in
        h|\?)
            usage 
            exit 0
            ;;
        d)  start_dir=$OPTARG ;;
        A)  project=$OPTARG   ;;
        p)  partition=$OPTARG ;;
        b)  batch_script=$OPTARG ;;
        *)  echo "Error: invalid optional argument $OPTARG" 
            usage 
            exit 1
            ;;
    esac
done

# check for time positional argument
if [ $(( $# - $OPTIND )) -ge 0 ]; then
    runtime=$(parse_time ${@:$OPTIND:1})
fi

start_notebook $start_dir $runtime $project
